#!/usr/bin/env python
import argparse
import os
import sys

parser = argparse.ArgumentParser(description='''
  Concatenate and print files.
''', formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument(
    'files', metavar='N', nargs='*', help='Pathname to input files.')
parser.add_argument(
    '-u', dest='unbuffer', action='store_true', help='unbuffer output')
parser.add_argument(
    '-v', dest='log_level', action='count', default=0, help='verbose output')

args = parser.parse_intermixed_args()

# Sets the standard exit status for interrupts and broken pipes (pure vanity)
import signal
signal.signal(signal.SIGPIPE, signal.SIG_DFL)
signal.signal(signal.SIGINT, signal.SIG_DFL)

# Setup logging
import logging
logging.basicConfig(
    level=os.environ.get('LOG_LEVEL', logging.WARN - args.log_level * 10),
    format='[%(asctime)s] %(levelname)s %(filename)s - %(message)s',
    datefmt='%Y-%m-%dT%H:%M:%S%z',
)
logger = logging.getLogger(__file__)

#############################################################################
# Command code


# Copies a stream in chuck_size chunks. The unbuffering here is simplistic.
def copy_stream(i, o, chuck_size=1024, unbuffer=False):
    while True:
        data = i.read(chuck_size)
        if len(data) == 0:
            logger.debug("eof")
            break
        logger.debug(f"read: {len(data)}")
        o.write(data)
        if unbuffer:
            o.flush()


files = args.files
if len(files) == 0:
    files.append('-')

for filename in files:
    logger.info(f"filename: {filename}")

    if filename == '-':
        copy_stream(sys.stdin, sys.stdout, 1, args.unbuffer)
        continue

    with open(filename, 'r') as f:
        copy_stream(f, sys.stdout, 1, args.unbuffer)
